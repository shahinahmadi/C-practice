#ifndef H_polynomial
#define H_polynomial
#include <iostream>
#include <string>
//#include<iostream>
#include<vector>
#include<complex>
using namespace std;

class Polynomial
{
 private:
  //int degree;
  vector<double> a; // coefficients of polynomial
 public:
  Polynomial();//default constructor with a[0]=0.0
  
  Polynomial(const vector<double>&b);// constructor 2

  Polynomial(const Polynomial&p);//copy constructor

  void print_parameters(); // Print the parameters

  int get_order() const; // Returning the order of polynomial function
  void set_parameters(const vector<double>b);//Parameters setting by vector

  void set_parameter(int i, double b);//Parameter setting
  
  double get_parameter(int i)const;// Returning coefficients of polynomial

  double operator()(const double x)const;// Evaluating the polynomial function
  double  alginteg(double xmin, double xmax);// Algebratic integration of the function
  
};

double integrate(const Polynomial&P, double xmin, double  xmax);//Integration of polynomial function
  
vector <complex<double>>find_roots(const Polynomial&p);// Finding the roots of polynomial function

ostream& operator<<(ostream & out, const Polynomial & p);//Overloading the << operator

#endif
  
  
  
